newlines = LF
input_tab_size = 4  # original tab size
output_tab_size = 2 # new tab size

# Indentation
indent_with_tabs = 0 # 1=indent to level only, 2=indent with tabs
indent_columns = output_tab_size
indent_align_string = FALSE # align broken strings
indent_brace = 0
indent_class = TRUE
indent_namespace = FALSE
indent_member = indent_columns
indent_switch_case = indent_columns

# Newlines
nl_start_of_file = remove
nl_end_of_file = force
nl_end_of_file_min = 1
nl_max = 2
nl_before_block_comment = 2
nl_after_func_body = 2
nl_after_func_proto_group = 2
nl_assign_brace = remove # "= {" vs "= \n {"
nl_enum_brace = remove   # "enum {" vs "enum \n {"
nl_union_brace = remove  # "union {" vs "union \n {"
nl_struct_brace = remove # "struct {" vs "struct \n {"
nl_do_brace = remove     # "do {" vs "do \n {"
nl_if_brace = remove     # "if () {" vs "if () \n {"
nl_for_brace = remove    # "for () {" vs "for () \n {"
nl_else_brace = remove   # "else {" vs "else \n {"
nl_while_brace = remove  # "while () {" vs "while () \n {"
nl_switch_brace = remove # "switch () {" vs "switch () \n {"
nl_var_def_blk_end_func_top = 1
nl_before_case = 1
nl_fcall_brace = remove # "foo() {" vs "foo()\n{"
nl_fdef_brace = remove  # "int foo() {" vs "int foo()\n{"
nl_after_return = TRUE
nl_brace_while = remove
nl_brace_else = remove # "} else" vs "} \n else" - cuddled else
nl_squeeze_ifdef = TRUE

# Positioning
pos_bool = trail # BOOL ops on trailing end
# The position of conditional operators, as in the '?' and ':' of
# 'expr ? stmt : stmt', in wrapped expressions.
pos_conditional = break # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force

# Eat blanks
eat_blanks_before_close_brace = TRUE
eat_blanks_after_open_brace = TRUE

# Modifiers
mod_paren_on_return = false  # "return 1;" vs "return (1);"
mod_full_brace_if = force    # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for = force   # "for () a--;" vs "for () { a--; }"
mod_full_brace_do = force    # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while = force # "while (a) a--;" vs "while (a) { a--; }"

# Spacing
sp_try_brace = force
sp_brace_catch = force # ignore/add/remove/force
sp_brace_else = force
sp_else_brace = force
sp_before_byref = remove
sp_before_semi = remove
sp_paren_paren = remove         # space between (( and ))
sp_return_paren = remove        # "return (1);" vs "return(1);"
sp_sizeof_paren = remove        # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen = force        # "if (" vs "if("
sp_after_sparen = force         # "if () {" vs "if (){"
sp_after_cast = remove          # "(int) a" vs "(int)a"
sp_inside_braces = force        # "{ 1 }" vs "{1}"
sp_inside_braces_struct = force # "{ 1 }" vs "{1}"
sp_inside_braces_enum = force   # "{ 1 }" vs "{1}"
sp_inside_paren = remove
sp_inside_fparen = remove
sp_inside_sparen = remove
sp_inside_for = remove
sp_inside_square = remove
sp_assign = force
sp_arith = force
sp_bool = force
sp_compare = force
sp_assign = force
sp_after_comma = force
sp_func_def_paren = remove   # "int foo (){" vs "int foo(){"
sp_func_call_paren = remove  # "foo (" vs "foo("
sp_func_proto_paren = remove # "int foo ();" vs "int foo();"
sp_func_class_paren = remove
sp_before_angle = remove
sp_angle_word = force
sp_angle_paren = remove
sp_sparen_brace = add
sp_fparen_brace = add
sp_after_ptr_star = force
sp_before_ptr_star = remove
sp_between_ptr_star = remove

# Alignment
align_with_tabs = TRUE

# Comment
cmt_star_cont = TRUE
